Database Schema
===============

A :term:`Project` in doc-git consists of one or more :term:`Section`. :term:`Section` is the basic unit of access control. They are organized in a tree structure, which means each :term:`Section` can have zero or more child :term:`Section`.

:term:`Contents` defines the tree structure of :term:`Section`. The order of :term:`Section` in the same level of is important. Two :term:`Contents` with the same :term:`Section` but in different order are different.

:term:`Snapshot` stores a version of the :term:`Project`, including all :term:`Section` and its :term:`Contents`. Whenever a :term:`Section` or the :term:`Contents` is changed, a new :term:`Snapshot` will be stored.

:term:`Snapshot` are organized in a :term:`Directed Acyclic Graph` (DAG). Each :term:`Snapshot` has zero, one or two parents. Only the first :term:`Snapshot` has zero parent. :term:`Snapshot` that generated from changes in :term:`Contents` or :term:`Section` have one parent. Any two :term:`Snapshot` can be merged together to create a new :term:`Snapshot`. The merged :term:`Snapshot` will have two parents.

Each :term:`Section` is stored in a seperate file.

doc-git use 4 database tables (:ref:`section`, :ref:`contents` and :ref:`snapshot` and :ref:`project`) to persist the data structure.

.. _section:

section
-------

The content of the :term:`Section` are stored in filesystem instead of database to strike for the best performance. The :ref:`section` table serves as a look up table for the contents stored in filesystem. In the :ref:`section` table, the path to the :term:`Section` content file is stored together with its :term:`SHA256` hash. The hash is used as an unique identifer of the :term:`Section`. :term:`Section` with the same content can be identified quickly by checking whether the hash of the :term:`Section` already exists in the table.

:term:`Section` content are stored in the ``sections`` folder inside 2 folders named with the first 6 hexadecimal numbers of the `SHA256` hash, and the filename is the next 58 hexadecimal numbers. For example, the :term:`SHA256` hash of a :term:`Section` is ``0d123284581a618aa4d2b7a81f9f7e5358a2ee7eee419de5d42739f843f6d12f``. The :term:`Section` will be stored in ``sections/0d1/232/84581a618aa4d2b7a81f9f7e5358a2ee7eee419de5d42739f843f6d12f``.

.. note::
   In ext3 (a file system that is commonly used by Linux system), a directory is limited to have at most 32,000 subdirectories. The number of subdirectories is limited by inode as it can have at most 32,000 links only. However, the number of files under a directory is unlimited. Increases in number of files would affect the performance on file look up, but even 200,000 files in a directory is not a problem.\ [#dir_index]_

All plain text file are compressed by `zlib`_ to reduce the file size before writing to the file system. The `zlib package`_ in Python standard library is used to compress and decompress files.

Structure of the :ref:`section` table:

======== ======================= ===============================
Field    Field Type              Remarks
======== ======================= ===============================
hash     `CharField`_            max_length=64, primary_key=true
file     `FileField`_
======== ======================= ===============================

.. _contents:

contents
--------

The :ref:`contents` table stores the :term:`Contents` of a :term:`Project` and the meta-data of the :term:`Section`.

The :ref:`contents` table captures the tree structure of :term:`Section`. It uses :term:`Materialized Path` to store the tree. The implemenation of :term:`Materialized Path` is provided by `django-treebeard`_.

Structure of the :ref:`contents` table:

======== ======================= ==================================
Field     Field Type             Remarks
======== ======================= ==================================
id       `AutoField`_            Generated by Django automatically
name     `CharField`_            max_length=128
section  `ForeginKey`_           Link to section
path     `CharField`_            Inherited from `django-treebeard`_
depth    `PositiveIntegerField`_ Inherited from `django-treebeard`_
numchild `PositiveIntegerField`_ Inherited from `django-treebeard`_
======== ======================= ==================================

.. _snapshot:

snapshot
--------

:term:`Snapshot` is a :term:`DAG` of :term:`Contents` with maxium 2 parents. `django-dag`_ has an implementation of :term:`DAG` in Django. But there is no offical Python 3 support. The library is quite short and simple. It looks like it doesn't have any Python 3 incompatibility at the first glance. Even there are some incompatilities, it should be easy to port to Python 3.

If not using `django-dag`_, we will have to implement our simplied :term:`DAG` structure which have two parents at maximum.

.. _project:

project
-------

The :ref:`project` table stores the meta-data of the `Project` and a reference to the least :term:`Snapshot`.

Struture of the :ref:`project` table:

======== ============= ==================================
Field    Field Type    Remarks
======== ============= ==================================
id       `AutoField`_  Generated by Django automatically
name     `CharField`_  max_length=128
summary  `CharField`_  max_length=2048
snapshot `ForeginKey`_ Link to section
======== ============= ==================================

.. rubric:: Footnotes

.. [#dir_index] http://serverfault.com/questions/129953/maximum-number-of-files-in-one-ext3-directory-while-still-getting-acceptable-per#129956

.. Links:
.. _FileField: https://docs.djangoproject.com/en/1.6/ref/models/fields/#filefield
.. _CharField: https://docs.djangoproject.com/en/1.6/ref/models/fields/#charfield
.. _ForeginKey: https://docs.djangoproject.com/en/1.6/ref/models/fields/#foreginkey
.. _PositiveIntegerField: https://docs.djangoproject.com/en/1.6/ref/models/fields/#positiveintegerfield
.. _zlib: https://zh.wikipedia.org/wiki/Zlib
.. _zlib package: http://docs.python.org/3.3/library/zlib.html
.. _django-treebeard: https://tabo.pe/projects/django-treebeard/docs/1.61/index.html
.. _AutoField: https://docs.djangoproject.com/en/1.6/ref/models/fields/#autofield
.. _django-dag: https://github.com/elpaso/django-dag
